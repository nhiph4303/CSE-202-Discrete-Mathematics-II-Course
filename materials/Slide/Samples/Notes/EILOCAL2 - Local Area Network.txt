import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.*;

class Main {
	static InputReader reader;

	public static void main(String[] args) throws IOException {
		reader = new InputReader(System.in);
		Vertex[] graph = readGraph();
		for (int i = 1; i < graph.length; ++i) {
			Vertex v = graph[i];
			System.out.println(v.getDegree());
		}

		//Tìm distance lớn nhất
	}

	dfs(Vertex v)
		//Mark v visted
		//Duyệt qua từng con
		for(Edge e:
			
			if(e.enpoint.visted =...
				e.enpoint.distance = v.distance  + e.wieght;
				dfs(e.enpoint)
	
	bfs(Vertex v)
		//Tạo q
		Add v vào q và đánh dấu v.
		v.level = 0;
		while q is not empty
			lấy vertex từ q (poll)
			duyệt qua các cạnh e kề với vertex
			if(e.enpoint.visted =...
				e.enpoint.distance = v.distance  + e.wieght;
				add e.endpoint vào q.

	static class Vertex {
		public int id;
		public int distance;
		public List< Edge> adjecentEdges = new ArrayList< Edge>();

		public Vertex(int id) {
			this.id = id;
		}

		public void addAdjecentVertex(Vertex vertex, int weight) {
			//Tạo addEdge và add vào ds
			//adjecentVertices.add(vertex);
			Edge e = new Edge(vertex, weight)
			adjecentEdges.add(e);
		}

		public int getDegree() {
			return adjecentVertices.size();
		}

		@Override
		public String toString() {
			return id + "";
		}

	}

	static class Edge{
		Vertex endpoint;
		int weight;
	}

	
}
